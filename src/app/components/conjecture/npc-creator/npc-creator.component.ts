import { Component, OnInit } from '@angular/core';
import { DiceUtil } from 'src/app/features/dice/dice-util';
import { ListTable, ListTableRow } from 'src/app/features/tables/list-table';
import { RangeTable, RangeTableRow } from 'src/app/features/tables/range-table';
import { StorageService } from 'src/app/services/storage.service';

@Component({
  selector: 'app-npc-creator',
  templateUrl: './npc-creator.component.html',
  styleUrls: ['./npc-creator.component.scss']
})
export class NpcCreatorComponent implements OnInit {
  sceneRandomness = 'Standard';

  constructor(
    private dataService: StorageService
  ) { }

  ngOnInit(): void { }

  rollSceneRandomness() {
    const randomness = sceneRandomness.roll();
    this.sceneRandomness = randomness.value;
  }

  une() {
    const modifier = npcModifier.roll();
    const noun = npcNoun.roll();
    
    let powerLevel: RangeTableRow | null = null;
    if (this.sceneRandomness === 'Order') {
      powerLevel = powerLevel_Order.roll();
    } else if (this.sceneRandomness === 'Calm') {
      powerLevel = powerLevel_Calm.roll();
    } else if (this.sceneRandomness === 'Standard') {
      powerLevel = powerLevel_Standard.roll();
    } else if (this.sceneRandomness === 'Disarray') {
      powerLevel = powerLevel_Disarray.roll();
    } else if (this.sceneRandomness === 'Chaos') {
      powerLevel = powerLevel_Chaos.roll();
    }

    const motivationVerb1 = npcMotivationVerb.roll();
    const motivationVerb2 = npcMotivationVerb.roll();
    const motivationVerb3 = npcMotivationVerb.roll();
    const motivationNoun1 = npcMotivationNoun.roll();
    const motivationNoun2 = npcMotivationNoun.roll();
    const motivationNoun3 = npcMotivationNoun.roll();

    let message = '';
    if (['a', 'e', 'i', 'o', 'u', 'w'].includes(modifier.value[0])) {
      message = 'An ';
    } else {
      message = 'A ';
    }
    message += `${modifier.value} ${noun.value}, ${powerLevel?.value}`;
    if (powerLevel?.value === 'comparable') {
      message += ' in power with the party.';
    } else {
      message += ' than the party.';
    }
    message += ` They ${motivationVerb1.value} ${motivationNoun1.value}`;
    message += `, ${motivationVerb2.value} ${motivationNoun2.value}`;
    message += `, ${motivationVerb3.value} ${motivationNoun3.value}.`;
    
    this.dataService.data.log.add(message);
  }
}

const npcModifier = new ListTable([
  new ListTableRow('superfluous'),
  new ListTableRow('addicted'),
  new ListTableRow('conformist'),
  new ListTableRow('nefarious'),
  new ListTableRow('sensible'),
  new ListTableRow('untrained'),
  new ListTableRow('romantic'),
  new ListTableRow('unreasonable'),
  new ListTableRow('skilled'),
  new ListTableRow('neglectful'),
  new ListTableRow('lively'),
  new ListTableRow('forthright'),
  new ListTableRow('idealistic'),
  new ListTableRow('unsupportive'),
  new ListTableRow('rational'),
  new ListTableRow('coarse'),
  new ListTableRow('foolish'),
  new ListTableRow('cunning'),
  new ListTableRow('delightful'),
  new ListTableRow('miserly'),
  new ListTableRow('inept'),
  new ListTableRow('banal'),
  new ListTableRow('logical'),
  new ListTableRow('subtle'),
  new ListTableRow('reputable'),
  new ListTableRow('wicked'),
  new ListTableRow('lazy'),
  new ListTableRow('pessimistic'),
  new ListTableRow('solemn'),
  new ListTableRow('habitual'),
  new ListTableRow('meek'),
  new ListTableRow('helpful'),
  new ListTableRow('unconcerned'),
  new ListTableRow('generous'),
  new ListTableRow('docile'),
  new ListTableRow('cheery'),
  new ListTableRow('pragmatic'),
  new ListTableRow('serene'),
  new ListTableRow('thoughtful'),
  new ListTableRow('hopeless'),
  new ListTableRow('pleasant'),
  new ListTableRow('insensitive'),
  new ListTableRow('titled'),
  new ListTableRow('inexperienced'),
  new ListTableRow('prying'),
  new ListTableRow('oblivious'),
  new ListTableRow('refined'),
  new ListTableRow('indispensable'),
  new ListTableRow('scholarly'),
  new ListTableRow('conservative'),
  new ListTableRow('uncouth'),
  new ListTableRow('willful'),
  new ListTableRow('indifferent'),
  new ListTableRow('fickle'),
  new ListTableRow('elderly'),
  new ListTableRow('sinful'),
  new ListTableRow('naive'),
  new ListTableRow('privileged'),
  new ListTableRow('glum'),
  new ListTableRow('likable'),
  new ListTableRow('lethargic'),
  new ListTableRow('defiant'),
  new ListTableRow('obnoxious'),
  new ListTableRow('insightful'),
  new ListTableRow('tactless'),
  new ListTableRow('fanatic'),
  new ListTableRow('plebeian'),
  new ListTableRow('childish'),
  new ListTableRow('pious'),
  new ListTableRow('uneducated'),
  new ListTableRow('inconsiderate'),
  new ListTableRow('cultured'),
  new ListTableRow('revolting'),
  new ListTableRow('curious'),
  new ListTableRow('touchy'),
  new ListTableRow('needy'),
  new ListTableRow('dignified'),
  new ListTableRow('pushy'),
  new ListTableRow('kind'),
  new ListTableRow('corrupt'),
  new ListTableRow('jovial'),
  new ListTableRow('shrewd'),
  new ListTableRow('liberal'),
  new ListTableRow('compliant'),
  new ListTableRow('destitute'),
  new ListTableRow('conniving'),
  new ListTableRow('careful'),
  new ListTableRow('alluring'),
  new ListTableRow('defective'),
  new ListTableRow('optimistic'),
  new ListTableRow('affluent'),
  new ListTableRow('despondent'),
  new ListTableRow('mindless'),
  new ListTableRow('passionate'),
  new ListTableRow('devoted'),
  new ListTableRow('established'),
  new ListTableRow('unseemly'),
  new ListTableRow('dependable'),
  new ListTableRow('righteous'),
  new ListTableRow('confident'),
]);
const npcNoun = new ListTable([
  new ListTableRow('gypsy'),
  new ListTableRow('witch'),
  new ListTableRow('merchant'),
  new ListTableRow('expert'),
  new ListTableRow('commoner'),
  new ListTableRow('judge'),
  new ListTableRow('ranger'),
  new ListTableRow('occultist'),
  new ListTableRow('reverend'),
  new ListTableRow('thug'),
  new ListTableRow('drifter'),
  new ListTableRow('journeyman'),
  new ListTableRow('statesman'),
  new ListTableRow('astrologer'),
  new ListTableRow('duelist'),
  new ListTableRow('jack-of-all-trades'),
  new ListTableRow('aristocrat'),
  new ListTableRow('preacher'),
  new ListTableRow('artisan'),
  new ListTableRow('rogue'),
  new ListTableRow('missionary'),
  new ListTableRow('outcast'),
  new ListTableRow('mercenary'),
  new ListTableRow('caretaker'),
  new ListTableRow('hermit'),
  new ListTableRow('orator'),
  new ListTableRow('chieftain'),
  new ListTableRow('pioneer'),
  new ListTableRow('burglar'),
  new ListTableRow('vicar'),
  new ListTableRow('officer'),
  new ListTableRow('explorer'),
  new ListTableRow('warden'),
  new ListTableRow('outlaw'),
  new ListTableRow('adept'),
  new ListTableRow('bum'),
  new ListTableRow('sorcerer'),
  new ListTableRow('laborer'),
  new ListTableRow('master'),
  new ListTableRow('ascendant'),
  new ListTableRow('villager'),
  new ListTableRow('magus'),
  new ListTableRow('conscript'),
  new ListTableRow('worker'),
  new ListTableRow('actor'),
  new ListTableRow('herald'),
  new ListTableRow('highwayman'),
  new ListTableRow('fortune-hunter'),
  new ListTableRow('governor'),
  new ListTableRow('scrapper'),
  new ListTableRow('monk'),
  new ListTableRow('homemaker'),
  new ListTableRow('recluse'),
  new ListTableRow('steward'),
  new ListTableRow('polymath'),
  new ListTableRow('magician'),
  new ListTableRow('traveler'),
  new ListTableRow('vagrant'),
  new ListTableRow('apprentice'),
  new ListTableRow('politician'),
  new ListTableRow('mediator'),
  new ListTableRow('crook'),
  new ListTableRow('civilian'),
  new ListTableRow('activist'),
  new ListTableRow('hero'),
  new ListTableRow('champion'),
  new ListTableRow('cleric'),
  new ListTableRow('slave'),
  new ListTableRow('gunman'),
  new ListTableRow('clairvoyant'),
  new ListTableRow('patriarch'),
  new ListTableRow('shopkeeper'),
  new ListTableRow('crone'),
  new ListTableRow('adventurer'),
  new ListTableRow('soldier'),
  new ListTableRow('entertainer'),
  new ListTableRow('craftsman'),
  new ListTableRow('scientist'),
  new ListTableRow('ascetic'),
  new ListTableRow('superior'),
  new ListTableRow('performer'),
  new ListTableRow('magister'),
  new ListTableRow('serf'),
  new ListTableRow('brute'),
  new ListTableRow('inquisitor'),
  new ListTableRow('lord'),
  new ListTableRow('villain'),
  new ListTableRow('professor'),
  new ListTableRow('servant'),
  new ListTableRow('charmer'),
  new ListTableRow('globetrotter'),
  new ListTableRow('sniper'),
  new ListTableRow('courtier'),
  new ListTableRow('priest'),
  new ListTableRow('tradesman'),
  new ListTableRow('hitman'),
  new ListTableRow('wizard'),
  new ListTableRow('beggar'),
  new ListTableRow('tradesman'),
  new ListTableRow('warrior'),
]);
const sceneRandomness = new ListTable([
  new ListTableRow('Order'),
  new ListTableRow('Calm'),
  new ListTableRow('Standard'),
  new ListTableRow('Disarray'),
  new ListTableRow('Chaos'),
]);
const powerLevel_Order = new RangeTable([
  new RangeTableRow(1, 2, 'much weaker'),
  new RangeTableRow(3, 10, 'slightly weaker'),
  new RangeTableRow(11, 90, 'comparable'),
  new RangeTableRow(91, 98, 'slightly stronger'),
  new RangeTableRow(99, 100, 'much stronger'),
]);
const powerLevel_Calm = new RangeTable([
  new RangeTableRow(1, 4, 'much weaker'),
  new RangeTableRow(5, 15, 'slightly weaker'),
  new RangeTableRow(16, 85, 'comparable'),
  new RangeTableRow(86, 96, 'slightly stronger'),
  new RangeTableRow(97, 100, 'much stronger'),
]);
const powerLevel_Standard = new RangeTable([
  new RangeTableRow(1, 5, 'much weaker'),
  new RangeTableRow(6, 20, 'slightly weaker'),
  new RangeTableRow(21, 80, 'comparable'),
  new RangeTableRow(81, 95, 'slightly stronger'),
  new RangeTableRow(96, 100, 'much stronger'),
]);
const powerLevel_Disarray = new RangeTable([
  new RangeTableRow(1, 8, 'much weaker'),
  new RangeTableRow(9, 25, 'slightly weaker'),
  new RangeTableRow(26, 75, 'comparable'),
  new RangeTableRow(76, 92, 'slightly stronger'),
  new RangeTableRow(93, 100, 'much stronger'),
]);
const powerLevel_Chaos = new RangeTable([
  new RangeTableRow(1, 12, 'much weaker'),
  new RangeTableRow(13, 30, 'slightly weaker'),
  new RangeTableRow(31, 70, 'comparable'),
  new RangeTableRow(71, 88, 'slightly stronger'),
  new RangeTableRow(89, 100, 'much stronger'),
]);
const npcMotivationVerb = new ListTable([
  new ListTableRow('advise'),
  new ListTableRow('obtain'),
  new ListTableRow('attempt'),
  new ListTableRow('spoil'),
  new ListTableRow('oppress'),
  new ListTableRow('interact'),
  new ListTableRow('create'),
  new ListTableRow('abduct'),
  new ListTableRow('promote'),
  new ListTableRow('conceive'),
  new ListTableRow('blight'),
  new ListTableRow('progress'),
  new ListTableRow('distress'),
  new ListTableRow('possess'),
  new ListTableRow('record'),
  new ListTableRow('embrace'),
  new ListTableRow('contact'),
  new ListTableRow('pursue'),
  new ListTableRow('associate'),
  new ListTableRow('prepare'),
  new ListTableRow('shepherd'),
  new ListTableRow('abuse'),
  new ListTableRow('indulge'),
  new ListTableRow('chronicle'),
  new ListTableRow('fulfill'),
  new ListTableRow('drive'),
  new ListTableRow('review'),
  new ListTableRow('aid'),
  new ListTableRow('follow'),
  new ListTableRow('advance'),
  new ListTableRow('guard'),
  new ListTableRow('conquer'),
  new ListTableRow('hinder'),
  new ListTableRow('plunder'),
  new ListTableRow('construct'),
  new ListTableRow('encourage'),
  new ListTableRow('agonize'),
  new ListTableRow('comprehend'),
  new ListTableRow('administer'),
  new ListTableRow('relate'),
  new ListTableRow('take'),
  new ListTableRow('discover'),
  new ListTableRow('deter'),
  new ListTableRow('acquire'),
  new ListTableRow('damage'),
  new ListTableRow('publicize'),
  new ListTableRow('burden'),
  new ListTableRow('advocate'),
  new ListTableRow('implement'),
  new ListTableRow('understand'),
  new ListTableRow('collaborate'),
  new ListTableRow('strive'),
  new ListTableRow('complete'),
  new ListTableRow('compel'),
  new ListTableRow('join'),
  new ListTableRow('assist'),
  new ListTableRow('defile'),
  new ListTableRow('produce'),
  new ListTableRow('institute'),
  new ListTableRow('account'),
  new ListTableRow('work'),
  new ListTableRow('accompany'),
  new ListTableRow('offend'),
  new ListTableRow('guide'),
  new ListTableRow('learn'),
  new ListTableRow('persecute'),
  new ListTableRow('communicate'),
  new ListTableRow('process'),
  new ListTableRow('report'),
  new ListTableRow('develop'),
  new ListTableRow('steal'),
  new ListTableRow('suggest'),
  new ListTableRow('weaken'),
  new ListTableRow('achieve'),
  new ListTableRow('secure'),
  new ListTableRow('inform'),
  new ListTableRow('patronize'),
  new ListTableRow('depress'),
  new ListTableRow('determine'),
  new ListTableRow('seek'),
  new ListTableRow('manage'),
  new ListTableRow('suppress'),
  new ListTableRow('proclaim'),
  new ListTableRow('operate'),
  new ListTableRow('access'),
  new ListTableRow('refine'),
  new ListTableRow('compose'),
  new ListTableRow('undermine'),
  new ListTableRow('explain'),
  new ListTableRow('discourage'),
  new ListTableRow('attend'),
  new ListTableRow('detect'),
  new ListTableRow('execute'),
  new ListTableRow('maintain'),
  new ListTableRow('realize'),
  new ListTableRow('convey'),
  new ListTableRow('rob'),
  new ListTableRow('establish'),
  new ListTableRow('overthrow'),
  new ListTableRow('support'),
]);
const npcMotivationNoun = new ListTable([
  new ListTableRow('wealth'),
  new ListTableRow('hardship'),
  new ListTableRow('affluence'),
  new ListTableRow('resources'),
  new ListTableRow('prosperity'),
  new ListTableRow('poverty'),
  new ListTableRow('opulence'),
  new ListTableRow('deprivation'),
  new ListTableRow('success'),
  new ListTableRow('distress'),
  new ListTableRow('contraband'),
  new ListTableRow('music'),
  new ListTableRow('literature'),
  new ListTableRow('technology'),
  new ListTableRow('alcohol'),
  new ListTableRow('medicines'),
  new ListTableRow('beauty'),
  new ListTableRow('strength'),
  new ListTableRow('intelligence'),
  new ListTableRow('force'),
  new ListTableRow('the wealthy'),
  new ListTableRow('the populous'),
  new ListTableRow('enemies'),
  new ListTableRow('the public'),
  new ListTableRow('religion'),
  new ListTableRow('the poor'),
  new ListTableRow('family'),
  new ListTableRow('the elite'),
  new ListTableRow('academia'),
  new ListTableRow('the forsaken'),
  new ListTableRow('the law'),
  new ListTableRow('the government'),
  new ListTableRow('the oppressed'),
  new ListTableRow('friends'),
  new ListTableRow('criminals'),
  new ListTableRow('allies'),
  new ListTableRow('secret societies'),
  new ListTableRow('the world'),
  new ListTableRow('military'),
  new ListTableRow('the church'),
  new ListTableRow('dreams'),
  new ListTableRow('discretion'),
  new ListTableRow('love'),
  new ListTableRow('freedom'),
  new ListTableRow('pain'),
  new ListTableRow('faith'),
  new ListTableRow('slavery'),
  new ListTableRow('enlightenment'),
  new ListTableRow('racism'),
  new ListTableRow('sensuality'),
  new ListTableRow('dissonance'),
  new ListTableRow('peace'),
  new ListTableRow('discrimination'),
  new ListTableRow('disbelief'),
  new ListTableRow('pleasure'),
  new ListTableRow('hate'),
  new ListTableRow('happiness'),
  new ListTableRow('servitude'),
  new ListTableRow('harmony'),
  new ListTableRow('justice'),
  new ListTableRow('gluttony'),
  new ListTableRow('lust'),
  new ListTableRow('envy'),
  new ListTableRow('greed'),
  new ListTableRow('laziness'),
  new ListTableRow('wrath'),
  new ListTableRow('pride'),
  new ListTableRow('purity'),
  new ListTableRow('moderation'),
  new ListTableRow('vigilance'),
  new ListTableRow('zeal'),
  new ListTableRow('composure'),
  new ListTableRow('charity'),
  new ListTableRow('modesty'),
  new ListTableRow('atrocities'),
  new ListTableRow('cowardice'),
  new ListTableRow('narcissism'),
  new ListTableRow('compassion'),
  new ListTableRow('valor'),
  new ListTableRow('patience'),
  new ListTableRow('advice'),
  new ListTableRow('propaganda'),
  new ListTableRow('science'),
  new ListTableRow('knowledge'),
  new ListTableRow('communications'),
  new ListTableRow('lies'),
  new ListTableRow('myths'),
  new ListTableRow('riddles'),
  new ListTableRow('stories'),
  new ListTableRow('legends'),
  new ListTableRow('industry'),
  new ListTableRow('new religions'),
  new ListTableRow('progress'),
  new ListTableRow('animals'),
  new ListTableRow('ghosts'),
  new ListTableRow('magic'),
  new ListTableRow('nature'),
  new ListTableRow('old religions'),
  new ListTableRow('expertise'),
  new ListTableRow('spirits'),
]);